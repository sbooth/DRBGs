//
// Copyright © 2025 Stephen F. Booth <me@sbooth.org>
// Part of https://github.com/sbooth/DRBGs
// MIT license
//

#if canImport(Darwin)
import Darwin
#elseif canImport(Glibc)
import Glibc
#else
#error("Unsupported Platform")
#endif

/// An implementation of the PRNG from Wang Yi's wyhash
///
/// - seealso: https://github.com/wangyi-fudan/wyhash
public struct WYRand: RandomNumberGenerator {
	/// The type of internal state maintained by the generator
	public typealias StateType = UInt64

	/// The current state of the generator
	public private(set) var state: StateType = 0

	/// Initializes the generator with a random seed
	public init() {
		let fd = open("/dev/urandom", O_RDONLY)
		precondition(fd >= 0, "Unable to open /dev/urandom")
		defer {
			close(fd)
		}
		read(fd, &state, MemoryLayout<StateType>.size)
	}

	/// Initializes the generator with a random seed generated by a `RandomNumberGenerator`
	///
	///  - parameter generator: A `RandomNumberGenerator` used to seed the generator
	///
	/// - parameter seed: The initial state
	public init(generator: inout RandomNumberGenerator) {
		state = generator.next()
	}

	/// Initializes the generator with the specified seed
	///
	/// - parameter seed: The initial state
	///
	/// - precondition: `seed` != 0
	public init(seed: StateType) {
		precondition(seed != 0, "Seed may not be zero")
		state = seed
	}

	/// Generates an unsigned integer in the interval [0, `UInt64.max`]
	///
	/// - returns: An unsigned integer *u* such that 0 ≤ *u* ≤ `UInt64.max`
	public mutating func next() -> UInt64 {
		state &+= 0x2d358dccaa6c78a5
		let mul = state.multipliedFullWidth(by: state ^ 0x8bb84b93962eacc9)
		return mul.high ^ mul.low
	}
}

extension WYRand: Equatable {
	/// Compares two `WYRand` objects for equality
	///
	/// Two `WYRand` objects are equal if their 64-bit state is the same.
	///
	/// - parameter lhs: lhs
	/// - parameter rhs: rhs
	///
	/// - returns: `true` if the two objects have the same state, `false` otherwise
	public static func ==(lhs: WYRand, rhs: WYRand) -> Bool {
		lhs.state == rhs.state
	}
}
